<functions>
<function>{"description": "Run commands in a bash shell\n* When invoking this tool, the contents of the \"command\" parameter does NOT need to be escaped.\n* You can access the internet via this tool with CLI's like \"curl\" or \"wget\" command.\n* You can install the necessary dependencies for your project with this tool, e.g. \"pip install\", \"npm install\", \"apt-get install\", \"brew install\", etc.\n* State EXCEPT environment variables are persisted between calls.\n* To inspect a particular line range of a file, e.g. lines 10-25, try 'sed -n 10,25p /path/to/the/file'.\n* Avoid commands that may produce a very large amount of output.\n* Run long lived commands in the background, e.g. 'sleep 10 &' or start a server in the background", "name": "bash", "parameters": {"properties": {"command": {"description": "The bash command to run.", "type": "string"}}, "type": "object"}}</function>
<function>{"description": "A tool to edit, create and delete files\n* The \"create\" command cannot be used if the specified \"path\" already exists as a file. It should only be used to create a file, and \"file_text\" must be supplied as the contents of the new file\n* The \"remove\" command can be used to remove an existing file\n\nNotes for using the \"str_replace\" command:\n* The \"old_str\" parameter should match EXACTLY one or more consecutive lines from the original file. Be mindful of whitespaces!\n* If the \"old_str\" parameter is not unique in the file, the replacement will not be performed. Make sure to include enough context in \"old_str\" to make it unique\n* The \"new_str\" parameter should contain the edited lines that should replace the \"old_str\"\n* Leave \"new_str\" parameter empty effectively remove \"old_str\" text from the file", "name": "file_editor", "parameters": {"properties": {"command": {"description": "The commands to run. Allowed options are: \"create\", \"create\", \"str_replace\", \"remove\".", "enum": ["create", "str_replace", "remove"], "type": "string"}, "file_text": {"description": "Required parameter of \"create\" command, with the content of the file to be created.", "type": "string"}, "new_str": {"description": "Required parameter of \"str_replace\" command containing the new string.", "type": "string"}, "old_str": {"description": "Required parameter of \"str_replace\" command containing the string in \"path\" to replace.", "type": "string"}, "path": {"description": "Relative path to file or directory, e.g. \"./file.py\"", "type": "string"}}, "type": "object"}}</function>
<function>{"description": "A tool to get an overview of all of the files found recursively in the current directory \n* Each file is recursively listed with its relative path from the current directory and the contents of the file.\n* The contents of the file may omit certain lines to reduce the number of lines returned. For example, for source code files, the function and method bodies are omitted.\n* The file can be of any type, as long as it contains only text", "name": "files_overview", "parameters": {"type": "object"}}</function>
<function>{"description": "A tool to help retrieve relevant files for a given set of input files\n* If the input files contain source code files, symbols like functions and types are extracted and matched in other files that contain the symbol's definition\n* If the input files contain other files, the tool will try to find files that mention the input files' names\n* This tool should only be called after the \"files_overview\" tool", "name": "get_related_files", "parameters": {"properties": {"input_files": {"description": "An array of input files to retrieve related files, e.g. source code files that have symbol definitions in another file or other files that mention the file's name.'", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}</function>
<function>{"description": "A tool to change the current working directory\n* The tool accepts a single parameter \"path\" specifying the target directory\n* Returns the full path of the new directory if successful\n* Returns an error message if the directory doesn't exist", "name": "change_directory", "parameters": {"properties": {"path": {"description": "The path to change to, can be relative or absolute", "type": "string"}}, "type": "object"}}</function>
</functions>