name: Execute CPE on Pull Request Comment

# See https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#issue_comment
on:
  issue_comment:
    types: [created]

jobs:
  cpe-process-comment:
    # Only run on PR comments and if PR is open
    if: ${{ github.event.issue.pull_request && github.event.issue.state == 'open' }}
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      CPE_CLAUDE_3_5_SONNET_URL: ${{ secrets.CPE_CLAUDE_3_5_SONNET_URL }}
    steps:
      # First checkout the default branch
      - uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get PR information
        id: pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Get PR data using GitHub CLI
          pr_data=$(gh pr view $PR_NUMBER --json headRefName -q .headRefName)
          echo "head_ref=$pr_data" >> $GITHUB_OUTPUT

      # Then fetch and checkout the PR branch
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.pr_info.outputs.head_ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true  # This is actually redundant since it's true by default in v4+

      - name: Install CPE
        run: go install github.com/spachava753/cpe@latest

      - name: Cache CPE conversation
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: .cpeconvo
          key: cpe-cache-${{ steps.pr_info.outputs.head_ref }}
          restore-keys: |
            cpe-cache-${{ steps.pr_info.outputs.head_ref }}

      - name: Run CPE and process changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Create temporary files
          temp_output_file=$(mktemp)
          temp_comment_file=$(mktemp)
          
          # Extract the comment directly from the event payload JSON file
          comment_body=$(jq -r '.comment.body' "$GITHUB_EVENT_PATH")
          
          # Check if the comment is '/clear convo'
          if [ "$comment_body" = "/clear convo" ]; then
            if [ -f ".cpeconvo" ]; then
              # Remove the local file
              rm .cpeconvo
              # Delete the cache entry using gh cache delete
              gh cache delete "cpe-cache-${{ steps.pr_info.outputs.head_ref }}"
              echo "### CPE Response" > "$temp_comment_file"
              echo "" >> "$temp_comment_file"
              echo "Conversation history cleared." >> "$temp_comment_file"
            else
              echo "### CPE Response" > "$temp_comment_file"
              echo "" >> "$temp_comment_file"
              echo "No conversation history found." >> "$temp_comment_file"
            fi
          else
            # Run CPE and capture its output
            if [ -f ".cpeconvo" ]; then
              echo "Found existing conversation, using -continue flag"
              # Extract comment directly from event JSON and pipe to cpe
              jq -r '.comment.body' "$GITHUB_EVENT_PATH" | cpe -continue 2>&1 | tee "$temp_output_file"
            else
              echo "No existing conversation found, starting new conversation"
              # Extract comment directly from event JSON and pipe to cpe
              jq -r '.comment.body' "$GITHUB_EVENT_PATH" | cpe 2>&1 | tee "$temp_output_file"
            fi
            
            # Handle any changes and commits
            if [[ -n "$(git status --porcelain)" ]]; then
              # Ask CPE to commit the changes
              echo "Please commit the changes with a suitable commit message" | cpe -continue
            fi
            
            # Always push changes, as there might be commits from previous CPE invocations
            git push origin HEAD:${{ steps.pr_info.outputs.head_ref }}
            
            # Create the PR comment
            echo "### CPE Response" > "$temp_comment_file"
            echo "" >> "$temp_comment_file"
            cat "$temp_output_file" >> "$temp_comment_file"
          fi
          
          # Post the comment and clean up
          gh pr comment $PR_NUMBER --body-file "$temp_comment_file"
          rm "$temp_output_file" "$temp_comment_file"